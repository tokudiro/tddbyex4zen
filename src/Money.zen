const std = @import("std");
const ok = std.testing.ok;
const Dollar = @import("Dollar.zen").Dollar;
const Franc = @import("Franc.zen").Franc;

test "testMultiplication" {
    var five = Dollar.init(5);
    ok( equals( Dollar.init(10), five.times(2) ) );
    ok( equals( Dollar.init(15), five.times(3) ) );
}

test "testEquality" {
    ok( equals( Dollar.init(5), Dollar.init(5) ) );
    ok( false == equals( Dollar.init(5), Dollar.init(6) ) );
    ok( equals( Franc.init(5), Franc.init(5) ) );
    ok( false == equals( Franc.init(5), Franc.init(6) ) );
}

test "testFrancMultiplication" {
    var five = Franc.init(5);
    ok( equals( Franc.init(10), five.times(2) ) );
    ok( equals( Franc.init(15), five.times(3) ) );
}

pub fn equals(self:var, object:var) bool {
    return self.amount == object.amount;
}

// [ ] $5+10CHF=$10
// [v] $5*2=$10
// [v] amountをprivateにする
// [v] Dollarの副作用をどうする？
// [ ] Moneyの丸め処理をどうする？
// [v] equals()
// [ ] hashCode()
// [ ] nullとの等価性比較
// [ ] 他のオブジェクトとの等価性比較
// [v] 5CHF*2=10CHF
// [v] equalsの一般化
// [ ] timesの一般化
