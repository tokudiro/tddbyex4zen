const std = @import("std");
const ok = std.testing.ok;

// [ ] $5+10CHF=$10

// [v] $5*2=$10
test "testMyltiplication" {
    var five = Dollar.init(5);
    var product = five.times(2);
    // 構造体は中身を比較するstd.testing.equalを使えば同じことができる
    // std.testing.equal( Dollar.init(10), product );
    ok( Dollar.init(10).equals(product) );
    product = five.times(3);
    ok(15==product.amount);
}

test "testEquality" {
    ok( Dollar.init(5).equals(Dollar.init(5)) );
    ok( false == Dollar.init(5).equals(Dollar.init(6)) );
}

const Dollar = struct {
    fn init(initial:i32) Dollar {
        return Dollar{
            .amount = initial,
        };
    }
    fn times(self:*Dollar, multiplier:i32) Dollar {
        return Dollar.init(self.amount * multiplier);
    }
    fn equals(self:*Dollar, object:var) bool {
        return self.amount == object.amount;
    }
    amount: i32
};

// [ ] amountをprivateにする
// [v] Dollarの副作用をどうする？
// [ ] Moneyの丸め処理をどうする？
// [v] equals()
// [ ] hashCode()
// [ ] nullとの等価性比較
// [ ] 他のオブジェクトとの等価性比較
